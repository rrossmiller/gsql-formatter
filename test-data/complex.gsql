create QUerY graph2gnn_train(INT current_partition=0,InT total_partitions= 100) FOR GRAPH TwitchEgos Syntax v2{
    /* 
     * this is a query description
    */
    TypeDef Tuple <INT from_id, INT to_id> Edges; // GNN train type
    TypeDef Tuple <INT id, STRING t> Vert; // GNN train type
    
    // Accumulators for tracking edges and involved Vertices
    maxaccum<INT> @id;
    MapAccum<INT, SetAccum<Edges>> @@edges;
    
    Users = {User.*};
    Users = SELECT s FROM Users:s 
        WHERE vertex_to_int(s) % total_partitions == current_partition
        ACCUM s.@id += s.id;
    
    // max 2-hop graph (this should be enough to encompas all subgraphs anyway)
    Friends = SELECT tgt FROM Users:s -(FRIENDSHIP>:e)- _:tgt
              ACCUM u.@graph_id += s.id,
                    u.@id += u.id,
                tgt.@graph_id += s.id,
            tgt.@id += tgt.id,
                // gnn stuff
                @@edges += (s.id-> Edges(s.id, u.id)),
                @@edges += (s.id -> Edges(u.id, tgt.id));

    PRINT @@edges as _edges; 
    PRINT Users;
}
